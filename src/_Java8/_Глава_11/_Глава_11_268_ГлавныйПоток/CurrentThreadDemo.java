package _Java8._Глава_11._Глава_11_268_ГлавныйПоток;
public class CurrentThreadDemo {
    public static void main(String[] args) {
        /*
        В этой программе ссылка к текущему потоку (главному потоку в этом случае)
        получена с помощью вызова currentThread () и сохранена в локальной переменной t
        .  Затем, программа отображает информацию о потоке, вызывает метод setName (),
         чтобы поменять внутреннее имя потока, и вновь выводит информацию о потоке.
         Далее, запускается обратный (от 5) цикл for, приостанавливающий поток на  одну
          секунду на каждом шаге. Пауза выполняется методом sleep о.  Аргумент sleep о
          определяет время задержки в миллисекундах.  Обратите внимание на обрамляющий
          этот цикл блок try/catch. Метод sleep о класса Thread мог бы выбросить
          исключение типа interruptedException.  Подобная ситуация сложилась, если бы
          некоторый другой поток хотел прервать это ожидание.  Данный пример только
          печатает сообщение, если он получает прерывание.
         */
        Thread t = Thread.currentThread();
        System.out.println("Текущий поток: " + t);
        // изменить имя потока
        t.setName("My Thread");
        System.out.println("После изменения имени: " + t);
        try {
            for (int n = 5; n > 0; n--) {
                System.out.println(n);
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
            System.out.println("Главный поток завершен");
        }
    }
}
