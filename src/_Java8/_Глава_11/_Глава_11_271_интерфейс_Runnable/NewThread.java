package _Java8._Глава_11._Глава_11_271_интерфейс_Runnable;
public class NewThread implements Runnable {
    Thread t;
    NewThread() {
        /*
        Передача this в качестве первого параметра указывает, что вы хотите,  чтобы
        новый поток на this-объекте вызвал метод run ().  Затем вызывается метод start
        (), который начинает выполнение потока в методе run ().  Это приводит к запуску
         цикла for дочернего потока. После вызова start о  конструктор NewThread
         возвращается к main(). Когда главный поток возобновляет выполнение,  он входит
          в свой for-цикл. Оба потока продолжают выполнение,  используя CPU совместно,
          до конца своих циклов.
         */
        // Создать новый, второй поток.
        t = new Thread(this, "Demo Thread");
        System.out.println("Дочерний поток: " + t);
        t.start(); // стартовать поток
        /*
        this - экземпляр (объект) класса,  который реализует интерфейс Runnable. Он
        определяет,  где начнется выполнение нового потока.
        После того как новый поток создан, он не начнет выполняться,  пока вы не
        вызываете его методом start(), который объявлен в Thread. В действительности
        start() выполняет вызов run()
         */
    }
    // Это точка входа во второй поток.
    /*
    run () может вызывать другие методы,  использовать другие классы и объявлять
    переменные точно так же, как это делает главный (main) поток.
     */
    public void run() {
        try {
            for (int i = 5; i > 0; i--) {
                System.out.println("Дочерний Поток: " + i);
                Thread.sleep(500);
            }
        } catch (InterruptedException e) {
            System.out.println("Прерывание дочернего потока.");
        }
        System.out.println("Завершение дочернего потока.");
    }
}
class ThreadDemo {
    public static void main(String args[]) {
        new NewThread(); // создать новый поток
        try {
            for (int i = 5; i > 0; i--) {
                System.out.println("Главный поток: " + i);
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
            System.out.println("Прерывание главного потока.");
        }
        System.out.println("Завершение главного потока.");
    }
}
